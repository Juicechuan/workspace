import java.io.File;
import java.io.IOException;
import java.util.*;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import edu.umd.cloud9.collection.wikipedia.*;

public class BuildInvertedIndex {

	public static class Map extends Mapper<LongWritable, WikipediaPage, Text, Text> {
		private Text title = new Text();
		private Text word = new Text();

		public void map(LongWritable key, WikipediaPage value, Context context)
				throws IOException, InterruptedException {
			title.set(value.getTitle());
			String content = value.getContent();
			for (String token:StringUtils.split(content)){
				word.set(token);
				context.write(word,title);
			}
		}
	}

	public static class Reduce extends Reducer<Text, Text, Text, Text> {
		private Text docIds = new Text();

		public void reduce(Text key, Iterable<Text> values, Context context)
				throws IOException, InterruptedException {
				HashSet<Text> uniqueDocIds = new HashSet<Text>();
				
				for (Text docId: values){
					uniqueDocIds.add(new Text(docId));
				}
				
				docIds.set(new Text(StringUtils.join(uniqueDocIds,",")));
				context.write(key,docIds);
		}
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();

		Job job = new Job(conf, "InvertedIndex");

		job.setInputFormatClass(WikipediaPageInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		
		job.setMapperClass(Map.class);
		job.setReducerClass(Reduce.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		
		Path outputPath = new Path("output");
		FileInputFormat.addInputPath(job, new Path("input"));
		FileOutputFormat.setOutputPath(job, outputPath);
		
		outputPath.getFileSystem(conf).delete(outputPath,true);
		
		job.waitForCompletion(true);
	}

}
