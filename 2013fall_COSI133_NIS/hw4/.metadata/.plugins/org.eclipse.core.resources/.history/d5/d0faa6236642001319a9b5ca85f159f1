
import java.io.File;
import java.io.IOException;
import java.util.*;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;



public class CommonFriends {
    
	 public static class Map extends Mapper<LongWritable, Text, Text, Text> {
	    //private Text frds;
	    private Text word = new Text();
	        
	    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	        String[] names = StringUtils.split(value.toString());
	        String person = names[0];
	        String[] friends = Arrays.copyOfRange(names, 1, names.length);
	        
	        for (String friend: friends) {
	        	String[] pair = new String[]{person,friend};
	        	Arrays.sort(pair);
	            word.set(StringUtils.join(pair,","));
	            context.write(word, new Text(StringUtils.join(friends,",")));
	        }
	    }
	 } 
	        
	 public static class Reduce extends Reducer<Text, Text, Text, Text> {

	    public void reduce(Text key, Iterable<Text> values, Context context) 
	      throws IOException, InterruptedException {
	    	Iterator<Text> itr = values.iterator();
	        Text frd1 = itr.next();
	        Text frd2 = itr.next();
	        
	        ArrayList<String> frdArray1 = new ArrayList<String>(Arrays.asList(StringUtils.split(frd1.toString(), ",")));
	        ArrayList<String> frdArray2 = new ArrayList<String>(Arrays.asList(StringUtils.split(frd2.toString(), ",")));
	        frdArray1.retainAll(frdArray2);
    
	        context.write(key, new Text(frdArray1.toString()));
	    }
	 }
	        
	 public static void main(String[] args) throws Exception {
	    Configuration conf = new Configuration();
	        
	        Job job = new Job(conf, "wordcount");
	    
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(Text.class);
	        
	    job.setMapperClass(Map.class);
	    job.setReducerClass(Reduce.class);
	        
	    job.setInputFormatClass(TextInputFormat.class);
	    job.setOutputFormatClass(TextOutputFormat.class);
	    
	        
	    FileInputFormat.addInputPath(job, new Path("input"));
	    File f = new File("output");
	    if (f.exists() && f.isDirectory()){
	    	FileUtils.deleteDirectory(f);
	    }
	    FileOutputFormat.setOutputPath(job, new Path("output"));
	   	  
	    job.waitForCompletion(true);
	 }
	        
}
