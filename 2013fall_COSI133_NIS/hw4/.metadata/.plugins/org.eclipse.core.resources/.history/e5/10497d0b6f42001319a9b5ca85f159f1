import java.io.File;
import java.io.IOException;
import java.util.*;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class CommonFriends {

	public static class Map extends Mapper<LongWritable, Text, Text, Text> {
		private Text frds = new Text();
		private Text word = new Text();

		public void map(LongWritable key, Text value, Context context)
				throws IOException, InterruptedException {
			String[] names = StringUtils.split(value.toString());
			String person = names[0];
			String[] friends = Arrays.copyOfRange(names, 1, names.length);
			frds.set(StringUtils.join(friends, ","));

			for (String friend : friends) {
				String[] pair = new String[] { person, friend };
				Arrays.sort(pair);
				System.out.println("Pair:"+StringUtils.join(pair,","));
				System.out.println("Friends:"+frds);
				word.set(StringUtils.join(pair, ","));
				context.write(word, frds);
			}
			System.out.println(";");
		}
	}

	public static class Reduce extends Reducer<Text, Text, Text, Text> {
		private Text cFriends = new Text();

		public void reduce(Text key, Iterable<Text> values, Context context)
				throws IOException, InterruptedException {
			ArrayList<String> objs = new ArrayList<String>();
			for (Text val : values) {
				objs.add(val.toString());
				System.out.println(objs);
			}
			
			Text frd1 = objs.get(0);
			Text frd2 = objs.get(1);
			
			System.out.println("Key:" + key);
			System.out.println("1:" + frd1);
			System.out.println("2:" + frd2);

			ArrayList<String> frdArray1 = new ArrayList<String>(
					Arrays.asList(StringUtils.split(frd1.toString(), ",")));
			ArrayList<String> frdArray2 = new ArrayList<String>(
					Arrays.asList(StringUtils.split(frd2.toString(), ",")));
			frdArray1.retainAll(frdArray2);
			cFriends.set(frdArray1.toString());

			context.write(key, cFriends);
		}
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();

		Job job = new Job(conf, "wordcount");

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		job.setMapperClass(Map.class);
		job.setReducerClass(Reduce.class);

		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);

		FileInputFormat.addInputPath(job, new Path("input"));
		File f = new File("output");
		if (f.exists() && f.isDirectory()) {
			FileUtils.deleteDirectory(f);
		}
		FileOutputFormat.setOutputPath(job, new Path("output"));

		job.waitForCompletion(true);
	}

}
